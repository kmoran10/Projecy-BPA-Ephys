# Create a combined dataframe for plotting
cor_long <- map2_dfr(cor_list, names(cor_list), ~ {
as.data.frame(.x) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "correlation") %>%
mutate(group = .y)
})
# Plot with facets
ggplot(cor_long, aes(x = var1, y = var2, fill = correlation)) +
geom_tile() +
geom_text(aes(label = round(correlation, 2)), color = "white", size = 3) +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name = "Correlation") +
facet_wrap(~ group) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Correlation Matrix by Group", x = "", y = "")
# outcome correlations
library(Matrix)
library(lme4)
library(lmerTest)
library(tidyverse)
#library(corrplot)
#library(patchwork)
#library(broom)
#library(ggcorrplot)
library(ggpubr)
#library(GGally)
library(car)
source("functions/geom_boxjitter.R")
rie2 <- read.csv("rawdata/rie_and_maxMC.csv")
rie2 <- rie2[,-1]
rie.forcor <- rie2 %>%
select(subslice,group,pnd,RMP.pre,epsc.events,epsc.amp,epsc.auc.pAms,mepsc.events,mepsc.amp,mepsc.auc.pAms,max_MC_pA)
######
# #Create correlation matrices for each group
# cor_list <- rie.forcor %>%
#   group_by(group) %>%
#   group_map(~ {
#     cor_matrix <- cor(.x[, 3:11], use = "pairwise.complete.obs")
#     return(cor_matrix)
#   })
#
# names(cor_list) <- unique(rie.forcor$group)
#
# # Create a combined dataframe for plotting
# cor_long <- map2_dfr(cor_list, names(cor_list), ~ {
#   as.data.frame(.x) %>%
#     rownames_to_column("var1") %>%
#     pivot_longer(cols = -var1, names_to = "var2", values_to = "correlation") %>%
#     mutate(group = .y)
# })
#
# # Plot with facets
# ggplot(cor_long, aes(x = var1, y = var2, fill = correlation)) +
#   geom_tile() +
#   geom_text(aes(label = round(correlation, 2)), color = "white", size = 3) +
#   scale_fill_gradient2(low = "blue", high = "red", mid = "white",
#                        midpoint = 0, limit = c(-1, 1), space = "Lab",
#                        name = "Correlation") +
#   facet_wrap(~ group) +
#   theme_minimal() +
#   theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
#   labs(title = "Correlation Matrix by Group", x = "", y = "")
######
#first all epsc corrs
ep.rmp.lm <- lm(epsc.events~group*RMP.pre, data=rie.forcor, na.action=na.exclude)
summary(ep.rmp.lm) #no interaction
ep.epam.lm <- lm(epsc.events~group*epsc.amp, data=rie.forcor, na.action=na.exclude)
summary(ep.epam.lm) #no interaction -- poss main eff
ep.epauc.lm <- lm(epsc.events~group*epsc.auc.pAms, data=rie.forcor, na.action=na.exclude)
summary(ep.epauc.lm) #no interaction
ep.mepev.lm <- lm(epsc.events~group*mepsc.events, data=rie.forcor, na.action=na.exclude)
summary(ep.mepev.lm) #no interaction
ep.mcpa.lm <- lm(epsc.events~group*max_MC_pA, data=rie.forcor, na.action=na.exclude)
summary(ep.mcpa.lm) #no interaction
epamp.mcpa.lm <- lm(epsc.amp~group*max_MC_pA, data=rie.forcor, na.action=na.exclude)
summary(epamp.mcpa.lm) #no interaction
epamp.epauc.lm <- lm(epsc.amp~group*epsc.auc.pAms, data=rie.forcor, na.action=na.exclude)
summary(epamp.epauc.lm) #no interaction -- poss main eff
epauc.mcpa.lm <- lm(epsc.auc.pAms~group*max_MC_pA, data=rie.forcor, na.action=na.exclude)
summary(epauc.mcpa.lm) #no interaction -- poss main eff
# mini corrs
mep.rmp.lm <- lm(mepsc.events~group*RMP.pre, data=rie.forcor, na.action=na.exclude)
summary(mep.rmp.lm) #no interaction -- poss main eff
mep.epam.lm <- lm(mepsc.events~group*mepsc.amp, data=rie.forcor, na.action=na.exclude)
summary(mep.epam.lm) #no interaction
mep.epauc.lm <- lm(mepsc.events~group*mepsc.auc.pAms, data=rie.forcor, na.action=na.exclude)
summary(mep.epauc.lm) #no interaction
mep.mcpa.lm <- lm(mepsc.events~group*max_MC_pA, data=rie.forcor, na.action=na.exclude)
summary(mep.mcpa.lm) #no interaction
mepamp.epauc.lm <- lm(mepsc.amp~group*mepsc.auc.pAms, data=rie.forcor, na.action=na.exclude)
summary(mepamp.epauc.lm) #INTERACTION p=0.0275
mepamp.mcpa.lm <- lm(mepsc.amp~group*max_MC_pA, data=rie.forcor, na.action=na.exclude)
summary(mepamp.mcpa.lm) #no interaction -- poss main eff
mepauc.mcpa.lm <- lm(mepsc.auc.pAms~group*max_MC_pA, data=rie.forcor, na.action=na.exclude)
summary(mepauc.mcpa.lm) #no interaction
# rmp and MC
mcpa.rmp.lm <- lm(max_MC_pA~group*RMP.pre, data=rie.forcor, na.action=na.exclude)
summary(mcpa.rmp.lm) #no interaction
###### significant figures
### mepsc.amp~group*mepsc.auc.pAms
ggplot(aes(x=mepsc.amp, y=mepsc.auc.pAms, color=group, linetype = group, shape = group), data=rie.forcor) +
labs(title="mEPSC amplitude by AUC ",x="mEPSC Amplitude (pA)", y = "AUC (pA-ms)") +
geom_smooth(method="lm", se=F) +
geom_point(size = 3) +
stat_cor(label.x = -18, size = 5, show.legend=FALSE)+
scale_linetype_manual(values=c("longdash", "solid"))+
scale_color_manual(values=c('hotpink','lightblue'))+
# geom_label(x = 1,  y = 1,
#            label = "Interaction p = .0275",
#            colour = "black",
#            size=6) +
theme_classic() +
annotate("text",x=-16.4, y=-38, label = "Interaction p=.0275", color = "black", size = 6) +
theme(axis.line = element_line(colour = 'black', size = 1),
axis.ticks = element_line(colour = "black", size = 1),
legend.position = c(.37, .908),
legend.title = element_blank(),
legend.text = element_text(size=12,face="bold"),
axis.text=element_text(size=16),
axis.title=element_text(size=18,face="bold"),
plot.title = element_text(size=24, hjust = 0.4),
legend.background=element_blank())
mepamp.epauc.lm <- lm(mepsc.amp~group*mepsc.auc.pAms, data=rie.forcor, na.action=na.exclude)
summary(mepamp.epauc.lm) #INTERACTION p=0.0275
#### TO DO ON LAPTOP
# install.packages("Matrix", type = "source")
# install.packages("lme4", type = "source")
# M-current
library(Matrix)
library(lme4)
library(lmerTest)
library(tidyverse)
library(ggpubr)
library(car)
source("functions/geom_boxjitter.R")
rie <- read.csv("rawdata/rmp-impre-epsc-data.csv")
rie$subslice <- paste(rie$subject, rie$slice, sep = "")
rie <- rie %>% relocate(subslice)
mcd <- read.csv("rawdata/mc-data.csv")
rie.id <- rie %>% select(subslice,group)
tmcd <- as.data.frame(t(mcd))
names(tmcd) <- lapply(tmcd[1, ], as.character)
tmcd <- tmcd[-1,]
tmcd1 <- tibble::rownames_to_column(tmcd, "ID")
tmcd2 <- tmcd1 %>%
separate(ID, into = c("mc.tp", "subject"), sep = "_", remove = TRUE) %>%
select(subject, everything()) %>%
separate(mc.tp, into = c("drug", "tp"), sep = "\\.", remove = TRUE) %>%
select(subject, everything()) %>%
rename(subslice = subject)
mcd3 <- left_join(rie.id,tmcd2, by="subslice")
mcd4 <- mcd3[!is.na(mcd3$drug),]
mc.pro <- mcd4 %>%
filter(tp %in% c("Y1", "Y2", "Y3", "Y4")) %>%
mutate(
drug_group = case_when(
drug %in% c("TTX1", "TTX2") ~ "TTX",
drug %in% c("XE1", "XE2") ~ "XE",
TRUE ~ NA_character_
),
group = group
) %>%
pivot_longer(cols = 5:15) %>%
# Remove NA values before calculations
filter(!is.na(value)) %>%
mutate(period = if_else(tp %in% c("Y1", "Y2"), "Y1Y2", "Y3Y4")) %>%
group_by(subslice, group, drug_group, period, name) %>%
summarise(
avg = mean(value, na.rm = TRUE),  # na.rm for additional protection
.groups = "drop"
) %>%
pivot_wider(names_from = period, values_from = avg) %>%
mutate(
diff = if_else(
is.na(Y1Y2) | is.na(Y3Y4),
NA_real_,  # Return NA if either period is completely missing
Y1Y2 - Y3Y4
)
) %>%
group_by(subslice, group, drug_group, name) %>%
summarise(
avg_diff = mean(diff, na.rm = TRUE),  # Will ignore NA diffs
.groups = "drop"
) %>%
pivot_wider(names_from = name, values_from = avg_diff) %>%
rename(drug = drug_group)
mcpro.long <- mc.pro %>%
pivot_longer(col = c(4:14), names_to = "mV", values_to = "pA")
mcpro.long$mV <- as.numeric(mcpro.long$mV)
mcpro.long$group <- as.factor(mcpro.long$group)
mc.diff <- mc.pro %>%
select(subslice, group, drug, 4:14) %>%  # Select relevant columns
pivot_longer(cols = -(1:3), names_to = "variable") %>%
pivot_wider(names_from = drug, values_from = value) %>%
mutate(MC = TTX - XE) %>%
select(subslice, group, variable, MC) %>%
pivot_wider(names_from = variable, values_from = MC)
mc.diff.long <- mc.diff %>%
pivot_longer(col = c(3:13), names_to = "mV", values_to = "pA")
mc.diff.long$mV <- as.numeric(mc.diff.long$mV)
mc.diff.long$group <- as.factor(mc.diff.long$group)
# First, identify which subslice values to exclude
subslices_to_exclude <- rie %>%
filter(RMP.xe > -40) %>%
pull(subslice) %>%
unique()
# Then filter both dataframes to exclude those subslices
mcpro.long_filtered <- mcpro.long %>%
filter(!subslice %in% subslices_to_exclude)
mc.diff.long_filtered <- mc.diff.long %>%
filter(!subslice %in% subslices_to_exclude)
mcpro.long %>%
filter(drug == "TTX") %>%
ggplot(., aes(mV, pA, color = group)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("Outward Current (TTX)")+
geom_hline(yintercept=0)
#save 800x450
mcpro.long %>%
filter(drug == "TTX") %>%
ggline(., x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 40 , size=8) +
ggtitle("Outward Current (TTX)")
#700x400
mcpro.long %>%
filter(drug == "XE") %>%
ggplot(., aes(mV, pA, color = group)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("Outward Current (XE)")+
geom_hline(yintercept=0)
#save 800x450
mcpro.long %>%
filter(drug == "XE") %>%
ggline(., x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 40 , size=8) +
ggtitle("Outward Current (XE)")
#700x400
ggplot(mc.diff.long, aes(mV, pA, color = group)) +
#  geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("M-Current (TTX-XE)") +
geom_hline(yintercept=0)
#save 800x450
ggline(mc.diff.long, x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 30 , size=8) +
ggtitle("Outward Current (TTX-XE)")
#700x400
####FILTERED ANALYSES WHERE ONLY RMP REMAINED < -40mV AT END OF RECORDING
mcpro.long_filtered %>%
filter(drug == "TTX") %>%
ggplot(., aes(mV, pA, color = group)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("Outward Current (TTX)")+
geom_hline(yintercept=0)
#save 800x450
mcpro.long_filtered %>%
filter(drug == "TTX") %>%
ggline(., x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 40 , size=8) +
ggtitle("Outward Current (TTX)")
#700x400
mcpro.long_filtered %>%
filter(drug == "XE") %>%
ggplot(., aes(mV, pA, color = group)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("Outward Current (XE)")+
geom_hline(yintercept=0)
#save 800x450
mcpro.long_filtered %>%
filter(drug == "XE") %>%
ggline(., x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 40 , size=8) +
ggtitle("Outward Current (XE)")
#700x400
ggplot(mc.diff.long_filtered, aes(mV, pA, color = group)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("M-Current (TTX-XE)") +
geom_hline(yintercept=0)
#save 800x450
ggline(mc.diff.long_filtered, x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 30 , size=8) +
ggtitle("Outward Current (TTX-XE)")
#700x400
### actual analysis
mc.diff.long_filtered2 <- mc.diff.long_filtered
mc.diff.long_filtered2$mvsq <- mc.diff.long_filtered2$mV^2
mc.dif.mm.int <- lmer(pA~group * (mV+mvsq) + (1 | subslice), data=mc.diff.long_filtered2, na.action=na.exclude)
summary(mc.dif.mm.int)
mc.dif.mm.main <- lmer(pA~group + mV + mvsq + (1 | subslice), data=mc.diff.long_filtered2, na.action=na.exclude)
summary(mc.dif.mm.main)
summary(mc.dif.mm.int)
summary(mc.dif.mm.int)
mc.dif.mm.main <- lmer(pA~group + mV + mvsq + (1 | subslice), data=mc.diff.long_filtered2, na.action=na.exclude)
summary(mc.dif.mm.main)
summary(mc.dif.mm.main)
# M-current
library(Matrix)
library(lme4)
library(lmerTest)
library(tidyverse)
library(ggpubr)
library(car)
source("functions/geom_boxjitter.R")
rie <- read.csv("rawdata/rmp-impre-epsc-data.csv")
rie$subslice <- paste(rie$subject, rie$slice, sep = "")
rie <- rie %>% relocate(subslice)
mcd <- read.csv("rawdata/mc-data.csv")
rie.id <- rie %>% select(subslice,group)
tmcd <- as.data.frame(t(mcd))
names(tmcd) <- lapply(tmcd[1, ], as.character)
tmcd <- tmcd[-1,]
tmcd1 <- tibble::rownames_to_column(tmcd, "ID")
tmcd2 <- tmcd1 %>%
separate(ID, into = c("mc.tp", "subject"), sep = "_", remove = TRUE) %>%
select(subject, everything()) %>%
separate(mc.tp, into = c("drug", "tp"), sep = "\\.", remove = TRUE) %>%
select(subject, everything()) %>%
rename(subslice = subject)
mcd3 <- left_join(rie.id,tmcd2, by="subslice")
mcd4 <- mcd3[!is.na(mcd3$drug),]
mc.pro <- mcd4 %>%
filter(tp %in% c("Y1", "Y2", "Y3", "Y4")) %>%
mutate(
drug_group = case_when(
drug %in% c("TTX1", "TTX2") ~ "TTX",
drug %in% c("XE1", "XE2") ~ "XE",
TRUE ~ NA_character_
),
group = group
) %>%
pivot_longer(cols = 5:15) %>%
# Remove NA values before calculations
filter(!is.na(value)) %>%
mutate(period = if_else(tp %in% c("Y1", "Y2"), "Y1Y2", "Y3Y4")) %>%
group_by(subslice, group, drug_group, period, name) %>%
summarise(
avg = mean(value, na.rm = TRUE),  # na.rm for additional protection
.groups = "drop"
) %>%
pivot_wider(names_from = period, values_from = avg) %>%
mutate(
diff = if_else(
is.na(Y1Y2) | is.na(Y3Y4),
NA_real_,  # Return NA if either period is completely missing
Y1Y2 - Y3Y4
)
) %>%
group_by(subslice, group, drug_group, name) %>%
summarise(
avg_diff = mean(diff, na.rm = TRUE),  # Will ignore NA diffs
.groups = "drop"
) %>%
pivot_wider(names_from = name, values_from = avg_diff) %>%
rename(drug = drug_group)
mcpro.long <- mc.pro %>%
pivot_longer(col = c(4:14), names_to = "mV", values_to = "pA")
mcpro.long$mV <- as.numeric(mcpro.long$mV)
mcpro.long$group <- as.factor(mcpro.long$group)
mc.diff <- mc.pro %>%
select(subslice, group, drug, 4:14) %>%  # Select relevant columns
pivot_longer(cols = -(1:3), names_to = "variable") %>%
pivot_wider(names_from = drug, values_from = value) %>%
mutate(MC = TTX - XE) %>%
select(subslice, group, variable, MC) %>%
pivot_wider(names_from = variable, values_from = MC)
mc.diff.long <- mc.diff %>%
pivot_longer(col = c(3:13), names_to = "mV", values_to = "pA")
mc.diff.long$mV <- as.numeric(mc.diff.long$mV)
mc.diff.long$group <- as.factor(mc.diff.long$group)
# First, identify which subslice values to exclude
subslices_to_exclude <- rie %>%
filter(RMP.xe > -40) %>%
pull(subslice) %>%
unique()
# Then filter both dataframes to exclude those subslices
mcpro.long_filtered <- mcpro.long %>%
filter(!subslice %in% subslices_to_exclude)
mc.diff.long_filtered <- mc.diff.long %>%
filter(!subslice %in% subslices_to_exclude)
mcpro.long %>%
filter(drug == "TTX") %>%
ggplot(., aes(mV, pA, color = group)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("Outward Current (TTX)")+
geom_hline(yintercept=0)
#save 800x450
mcpro.long %>%
filter(drug == "TTX") %>%
ggline(., x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 40 , size=8) +
ggtitle("Outward Current (TTX)")
#700x400
mcpro.long %>%
filter(drug == "XE") %>%
ggplot(., aes(mV, pA, color = group)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("Outward Current (XE)")+
geom_hline(yintercept=0)
#save 800x450
mcpro.long %>%
filter(drug == "XE") %>%
ggline(., x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 40 , size=8) +
ggtitle("Outward Current (XE)")
#700x400
ggplot(mc.diff.long, aes(mV, pA, color = group)) +
#  geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("M-Current (TTX-XE)") +
geom_hline(yintercept=0)
#save 800x450
ggline(mc.diff.long, x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 30 , size=8) +
ggtitle("Outward Current (TTX-XE)")
#700x400
####FILTERED ANALYSES WHERE ONLY RMP REMAINED < -40mV AT END OF RECORDING
mcpro.long_filtered %>%
filter(drug == "TTX") %>%
ggplot(., aes(mV, pA, color = group)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("Outward Current (TTX)")+
geom_hline(yintercept=0)
#save 800x450
mcpro.long_filtered %>%
filter(drug == "TTX") %>%
ggline(., x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 40 , size=8) +
ggtitle("Outward Current (TTX)")
#700x400
mcpro.long_filtered %>%
filter(drug == "XE") %>%
ggplot(., aes(mV, pA, color = group)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("Outward Current (XE)")+
geom_hline(yintercept=0)
#save 800x450
mcpro.long_filtered %>%
filter(drug == "XE") %>%
ggline(., x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 40 , size=8) +
ggtitle("Outward Current (XE)")
#700x400
ggplot(mc.diff.long_filtered, aes(mV, pA, color = group)) +
geom_point() +
geom_smooth(method = lm, formula = y ~ splines::bs(x, 3), se = T) +
theme_classic() +
ggtitle("M-Current (TTX-XE)") +
geom_hline(yintercept=0)
#save 800x450
ggline(mc.diff.long_filtered, x = "mV", y = "pA", add = "mean_se", group="group", color="group", size=1, ylab = "pA (+/- SEM)")+
stat_compare_means(aes(group = group, label=..p.adj..), method="t.test", label = "p.signif",
symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c( "***", "**", "*", "")),
label.y= 30 , size=8) +
ggtitle("Outward Current (TTX-XE)")
#700x400
